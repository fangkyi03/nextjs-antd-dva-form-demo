{"version":3,"file":"static/webpack/static/development/pages/index.js.4b51377352285316b2f4.hot-update.js","sources":["webpack:///./command/createDva.js"],"sourcesContent":["import React from 'react'\nimport api from './api'\nimport { Provider } from 'react-redux';\nimport dva, { connect } from 'dva-no-router';\nimport * as NetTools from './netTool';\nimport fetch from '../models/fetch';\nimport apiTool from './apiTool';\nimport {message} from 'antd'\n\nconst checkServer = () => Object.prototype.toString.call(global.process) === '[object process]';\n\n// eslint-disable-next-line\nconst __NEXT_DVA_STORE__ = '__NEXT_DVA_STORE__'\n\nfunction createDvaStore(initialState, modelList) {\n    console.log('输出modellIST', modelList)\n    let app;\n    if (initialState) {\n        app = dva({\n            initialState,\n        });\n    } else {\n        app = dva({});\n        modelList.forEach((e)=>{\n            app.model({\n                namespace: e,\n                state: {\n                    isShow: true,\n                },\n                reducers: {\n                    setValue(state,{payload}){\n                        console.log('输出赋值',state,payload)\n                        return {...state,...payload}\n                    },\n                    clear(state,{payload}){\n                        return {isShow:true}\n                    }\n                },\n                effect: {},\n                subscriptions: {},\n            })\n        })\n    }\n    app.model(\n        fetch({\n            netTool: NetTools,\n            onGLNetStart: ({ retData }) => {\n                if ((retData.code === 200) || retData.status === 0) {\n                    return retData;\n                }\n                return false;\n            },\n            onGLNetError: ({ retData, url }) => {\n                message.error(retData.msg || retData.message );\n            },\n            onGLNetCatch: ({ error }) => {\n                console.log('接口异常输出', error);\n            },\n        }),\n    );\n    app.router(() => { });\n    app.start();\n    const store = app._store\n    return store;\n}\n\nfunction getOrCreateStore(initialState, modelList,store) {\n    console.log('getOrCreateStore', isServer, modelList, store, !window[__NEXT_DVA_STORE__])\n    const isServer = checkServer();\n    if (isServer) { \n        return createDvaStore(initialState, modelList);\n    }\n    if (!window[__NEXT_DVA_STORE__]) {\n        window[__NEXT_DVA_STORE__] = createDvaStore(initialState, modelList);\n    }\n    console.log('输出window', window[__NEXT_DVA_STORE__])\n    return window[__NEXT_DVA_STORE__];\n}\n\n\nfunction createDva(modelList, { option = {} } = {}) {\n    class DvaView extends React.Component {\n\n        static defaultProps = {\n            isDestroy: true\n        }\n\n        constructor(props) {\n            super(props);\n            this.ComponentS = this.props.Component\n        }\n\n        componentWillUnmount() {\n            if (this.props.isDestroy) {\n                apiTool.clearList(this, this.props.modelList)\n            }\n        }\n        \n        getModalName = () =>{\n            return this.props.modelList[0]\n        }\n\n        render() {\n            const { Component, modelList, ...arg } = this.props\n            return (\n                <Component {...arg} modelList={modelList} />\n            )\n        }\n    }\n\n    return (Component) => {\n        const ComponentWithDva = (props = {}) => {\n            const { store, initialProps, initialState,...arg } = props;\n            const ComponentView = connect((state) => {\n                let obj = {}\n                modelList.forEach((e) => {\n                    obj = { ...obj, ...state[e] }\n                })\n                return { ...obj, Component, modelList }\n            }, null, null, option)(DvaView)\n            console.log('输出store', props)\n            return React.createElement(\n                Provider,\n                { store: getOrCreateStore(initialState, modelList, store)},\n                React.createElement(ComponentView, { ...initialProps, ...arg}),\n            );\n        };\n        ComponentWithDva.getInitialProps = async (props = {}) => {\n            const isServer = checkServer();\n            const store = getOrCreateStore(props.req, modelList);\n            const initialProps = Component.getInitialProps\n                ? await Component.getInitialProps({ ...props, isServer, store })\n                : {};\n            return {\n                store,\n                initialProps,\n                initialState: store.getState(),\n            };\n        };\n        return ComponentWithDva;\n    }\n}\n\nexport default createDva;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AACA;AAPA;AASA;AACA;AAfA;AAiBA;AACA;AACA;AAAA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAbA;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAMA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAYA;AACA;AACA;AAZA;AAFA;AAGA;AACA;AAXA;AAAA;AAAA;AAaA;AACA;AACA;AACA;AAhBA;AAAA;AAAA;AAsBA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AA3BA;AACA;AADA;AAAA;AACA;AADA;AAIA;AADA;AACA;AA0BA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAIA;AAAA;AAAA;AACA;AALA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AAGA;AAHA;AAOA;AACA;AACA;AAHA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}